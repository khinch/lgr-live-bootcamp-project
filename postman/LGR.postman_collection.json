{
	"info": {
		"_postman_id": "9bec568d-ec63-4de9-84bc-61f04cdeca40",
		"name": "LGR",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46962547",
		"_collection_link": "https://kieren-31a841a7-839654.postman.co/workspace/kieren-31a841a7's-Workspace~ca555c18-bc63-4d68-8955-27bded11bf10/collection/46962547-9bec568d-ec63-4de9-84bc-61f04cdeca40?action=share&source=collection_link&creator=46962547"
	},
	"item": [
		{
			"name": "Auth Service",
			"item": [
				{
					"name": "UI (root)",
					"item": [
						{
							"name": "GET /",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Signup",
					"item": [
						{
							"name": "POST Signup - Success - Lower Password Boundary",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);",
											"console.log(`Email: ${email}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Success - Upper Password Boundary",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"1234567890123456789012345678901234567890123456789012345678901234\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Duplicate",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {",
											"    pm.response.to.have.status(409); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('User already exists');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `email` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `password` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - No 2FA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const message = pm.response.text();",
											"    pm.expect(message).to.eql('Failed to deserialize the JSON body into the target type: missing field `requires2FA` at line 4 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Invalid Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar.com\",\n    \"password\": \"password\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Short Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"1234567\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Signup - Error - Long Password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"",
											"let bodyData = JSON.parse(pm.request.body.raw);",
											"bodyData.email = email;",
											"pm.request.body.raw = JSON.stringify(bodyData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"set by script\",\n    \"password\": \"12345678901234567890123456789012345678901234567890123456789012345\",\n    \"requires2FA\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "POST Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let setCookieHeader = pm.response.headers.get(\"Set-Cookie\");",
											"let token = setCookieHeader.split(\" \")[0].split(\"=\")[1].replace(\";\", \"\");",
											"pm.environment.set(\"token\", token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar.com\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foo@bar.com\",\n    \"password\": \"passwor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Non-existent User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Incorrect credentials');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"nonexistent@user.com\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - Error - Wrong Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Incorrect credentials');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"passworb\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify 2FA",
					"item": [
						{
							"name": "POST Verify 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/verify-2fa",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"verify-2fa"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Token",
					"item": [
						{
							"name": "POST Verify Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/verify-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"verify-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Malformed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"boken\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/verify-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"verify-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Verify Token - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"let us in mate\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/verify-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"verify-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "POST Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/logout",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Verify Token - Banned",
					"item": [
						{
							"name": "POST Verify Token - Banned",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"token\": \"{{token}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/verify-token",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"verify-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "DELETE delete-user - success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(`User deleted: ${pm.environment.get(\"random_email\")}`);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/delete-user",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"delete-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('User not found');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/delete-user",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"delete-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - invalid email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql('Invalid input');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/delete-user",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"delete-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - no email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const text = pm.response.text();",
											"    pm.expect(text).to.eql('Failed to deserialize the JSON body into the target type: missing field `email` at line 3 column 1');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"foo\": \"bar\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/delete-user",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"delete-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete-user - wrong type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const text = pm.response.text();",
											"    pm.expect(text).to.eql('Failed to deserialize the JSON body into the target type: email: invalid type: boolean `true`, expected a string at line 2 column 17');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/delete-user",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"delete-user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login - Deleted",
					"item": [
						{
							"name": "POST Login - Deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2FA",
					"item": [
						{
							"name": "POST Signup - Success - 2FA Enabled",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let uuid = require('uuid');",
											"let email = `${uuid.v4()}@testwebsitepleaseignore.uk`;",
											"pm.environment.set(\"random_email\", email);",
											"console.log(`Email: ${email}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('User created successfully');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\",\n    \"requires2FA\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/signup",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Login - 2FA Challenge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 206\", function () {",
											"    pm.response.to.have.status(206);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response message is correct\", function () {    ",
											"    pm.expect(jsonData.message).to.eql('2FA required');",
											"    pm.expect(jsonData.loginAttemptId).to.not.be.null;",
											"});",
											"",
											"pm.environment.set(\"2fa_code\", jsonData.loginAttemptId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{random_email}}\",\n    \"password\": \"password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{base_url}}/{{auth_service_path}}/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{auth_service_path}}",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "App Service",
			"item": [
				{
					"name": "GET /",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{base_url}}/{{app_service_path}}/",
							"protocol": "{{protocol}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{app_service_path}}",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}